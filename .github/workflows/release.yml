name: Release
on:
  push:
    tags:
      - "v*"

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: true
      # avoid generating multiple releases
      max-parallel: 1
      matrix:
        settings:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "windows-latest"
            args: ""
    runs-on: ${{ matrix.settings.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # ssh-key: ${{ secrets.SSH_KEY }}
          submodules: "recursive"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: pnpm installation
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm" # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # Change this to npm, yarn or pnpm.

      - name: Download OCR models
        run: |
          curl https://ocrs-models.s3-accelerate.amazonaws.com/text-detection.rten -o src-tauri/resources/text-detection.rten
          curl https://ocrs-models.s3-accelerate.amazonaws.com/text-recognition.rten -o src-tauri/resources/text-recognition.rten

      - name: Build the app
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.TAURI_GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{secrets.TAURI_PRIVATE_KEY}}
          TAURI_KEY_PASSWORD: ${{secrets.TAURI_KEY_PASSWORD}}
        with:
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          releaseName: "Beluga v__VERSION__" # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: "update available"
          releaseDraft: true
          prerelease: false
          # owner: "youginil"
          # repo: "beluga"
          releaseCommitish: "main"
          args: ${{ matrix.settings.args }}
